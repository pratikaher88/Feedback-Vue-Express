{"remainingRequest":"/Users/pratikaher/TingtunProjects/Feedback-Vue-Express/Client/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/pratikaher/TingtunProjects/Feedback-Vue-Express/Client/src/components/FeedbackForm.vue?vue&type=style&index=0&lang=css&","dependencies":[{"path":"/Users/pratikaher/TingtunProjects/Feedback-Vue-Express/Client/src/components/FeedbackForm.vue","mtime":1611846895901},{"path":"/Users/pratikaher/TingtunProjects/Feedback-Vue-Express/Client/node_modules/css-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/pratikaher/TingtunProjects/Feedback-Vue-Express/Client/node_modules/vue-loader/lib/loaders/stylePostLoader.js","mtime":499162500000},{"path":"/Users/pratikaher/TingtunProjects/Feedback-Vue-Express/Client/node_modules/postcss-loader/src/index.js","mtime":499162500000},{"path":"/Users/pratikaher/TingtunProjects/Feedback-Vue-Express/Client/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/pratikaher/TingtunProjects/Feedback-Vue-Express/Client/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:CgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCi5zdWJtaXRidXR0b24sIC5yZXZpZXdidXR0b24gewogIGJhY2tncm91bmQtY29sb3I6IHB1cnBsZTsKICBib3JkZXI6IG5vbmU7CiAgY29sb3I6IHdoaXRlOwogIHBhZGRpbmc6IDE1cHggMzJweDsKICBtYXJnaW46IDEwcHg7CiAgdGV4dC1hbGlnbjogY2VudGVyOwogIHRleHQtZGVjb3JhdGlvbjogbm9uZTsKICBkaXNwbGF5OiBpbmxpbmUtYmxvY2s7CiAgYm9yZGVyLXJhZGl1czogM3B4OwogIGZvbnQtc2l6ZTogMTJweDsKfQoKLm1heF9sZW5fdGFnewogIGNvbG9yOiByZWQ7Cn0KCi5wcmV2aWV3LXRhYnsKICBkaXNwbGF5OiBmbGV4OwogIGp1c3RpZnktY29udGVudDogY2VudGVyOwp9CgoKI2ZpbGUtdXBsb2FkLWltYWdlIHsgCiAgYm9yZGVyOiA1cHggc29saWQgIzU1NTsKICBtYXJnaW46MjBweDsKICB3aWR0aDogMjAwcHg7CiAgaGVpZ2h0OiAyMDBweDsKCn0KCg=="},{"version":3,"sources":["FeedbackForm.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAoVA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;;AAGA;AACA;AACA;AACA;AACA;;AAEA","file":"FeedbackForm.vue","sourceRoot":"src/components","sourcesContent":["<template>\n\n<section id=\"app\" class=\"section\">\n\n    <!-- <b-alert\n      :show=\"dismissCountDown\"\n      dismissible\n      fade\n      variant=\"success\"\n      @dismiss-count-down=\"countDownChanged\"\n    >\n      Response successfully submitted !\n    </b-alert> -->\n\n    <h1 class=\"title is-1\">\n        Feedback Tool\n    </h1>\n\n    <div class=\"columns\">\n        <div class=\"column\">\n            <form @submit.prevent=\"submitFeedbackForm()\" >\n              <div class=\"field\" >\n                  <label class=\"label\"> \n                    <strong> Comments: </strong> \n                    <span> \n                      ({{ commentCharacterCount }}/{{ max_len }}) \n                      <span v-if=\"lengthExceeded\" class=\"max_len_tag\">\n                        - Maximum length reached !\n                      </span>\n                    </span>\n                  </label>\n\n                  <div class=\"control\">\n                      <textarea id=\"textAreaBox\" rows=\"5\" cols=\"80\" v-model=\"feedbackTextArea\" :maxlength=\"max_len\" placeholder=\"We would love to hear your feedback. but please do not share any sensitive personal information.\"/>\n                      <br/>\n                      <Speech2Text @speechend=\"speechEnd\" />\n                      <!-- <Speech2Text @sentTexts=\"sentTexts\" @speechend=\"speechEnd\" /> -->\n                            <!-- {{sentences}} -->\n                  </div>\n\n                  <div class=\"action-buttons-tab pull-right\">\n                    \n                    <b-button id=\"uploadimagebutton\" @click=\"$bvModal.show('bv-modal-show-uploadimagebutton');\"> Upload Image </b-button>\n                    \n                    <b-modal id=\"bv-modal-show-uploadimagebutton\" size=\"xl\" hide-footer>\n                      <template #modal-title>\n                        Upload Image\n                      </template>\n                      <div class=\"d-block text-center\">\n                        <input type=\"file\" id=\"selectedImageId\" @change=\"onImageSelected\" accept=\"image/*\" >\n                        <strong style=\"margin-left: 0px;margin-right:20px\">OR</strong>\n                        <b-button id=\"screenshotbutton\" @click=\"clickSC(); $bvModal.show('bv-modal-show-screenshot');\"> Take screenshot </b-button>\n                        \n                        <br/>\n                        <br/>\n                        <div class=\"preview-tab\" v-if=\"isHidden\">\n                          <img id=\"file-upload-image\" :src=\"imageURL\" alt=\"\" />\n                        </div>\n                      </div>\n                      <b-button class=\"mt-3\" block variant='outline-danger' @click=\"removeImage\">Remove Preview Image</b-button>\n                      <b-button class=\"mt-3\" block @click=\"$bvModal.hide('bv-modal-show-uploadimagebutton')\">Close</b-button>\n\n                    </b-modal>\n\n                    <b-modal id=\"bv-modal-show-screenshot\" size=\"xl\" hide-footer>\n                      <template #modal-title>\n                        Screenshot\n                      </template>\n                      <div class=\"d-block text-center\">\n                        <cropper\n                            :src=\"screenshot\"\n                            @change=\"change\"\n                            :stencil-props=\"{\n                              aspectRatio: 16/9,\n                            }\"\n                          />\n                      </div>\n                      <b-button class=\"mt-3\" block @click=\"$bvModal.hide('bv-modal-show-screenshot')\">Close</b-button>\n                      <b-button class=\"mt-3\" variant='outline-danger' block @click=\"cropImage();$bvModal.hide('bv-modal-show-screenshot')\">Crop and Save</b-button>\n\n                    </b-modal>\n\n                    <b-button class=\"reviewbutton\" @click=\"$bvModal.show('bv-modal-review-data')\">Review Data</b-button>\n\n                    <b-modal id=\"bv-modal-review-data\" hide-footer>\n                      <template #modal-title>\n                        Review Data\n                      </template>\n                      <div class=\"d-block text-center\">\n                        <b-list-group v-for=\"(value, index) in responseData\" :key=\"index\">\n    \n                          <b-list-group-item align=\"left\" > <strong> {{ Object.keys(value)[0] }} </strong> : {{ value[Object.keys(value)[0]] }} <button class=\"btn btn-danger\" v-on:click=\"deleteItem(index)\" style=\"float: right;\">x</button></b-list-group-item>\n\n                        </b-list-group>\n\n                          <b-list-group-item align=\"left\" v-if=\"this.feedbackTextArea\" style=\"padding:20px\"> <strong> Comment </strong> : {{ this.feedbackTextArea }} <button class=\"btn btn-danger\" v-on:click=\"deleteComment()\" style=\"float: right; \">x</button></b-list-group-item>\n\n                          <b-list-group-item align=\"left\" v-if=\"this.imageURL\"> <strong> Image URL</strong> : <img id=\"file-upload-image\" :src=\"imageURL\" alt=\"\" /> <button class=\"btn btn-danger\" v-on:click=\"removeImage()\" style=\"float: right;\">x</button></b-list-group-item>\n\n\n                      </div>\n                      <b-button class=\"mt-3\" block @click=\"$bvModal.hide('bv-modal-review-data')\">Close</b-button>\n                    </b-modal>\n\n                    <button class=\"submitbutton\" @submit.prevent=\"submitFeedbackForm\" >SUBMIT</button>\n                </div>\n              </div>\n            </form>\n        </div>\n    </div>\n\n    <!-- {{ responseData }} -->\n\n    <!-- <input type=\"text\" @sentTexts=\"sentTexts($event)\"> -->\n\n    <br/>\n    <br/>\n\n</section>\n\n</template>\n\n<script>\n\n\nimport AWS from \"aws-sdk\";\nimport Speech2Text from \"./STT\"\nimport html2canvas from 'html2canvas';\nimport { Cropper } from 'vue-advanced-cropper';\nimport { v4 as uuidv4 } from 'uuid';\nimport 'vue-advanced-cropper/dist/style.css';\nimport axios from 'axios';\n\n\nAWS.config.update({\n      region: \"ap-south-1\",\n      credentials: new AWS.CognitoIdentityCredentials({\n        IdentityPoolId: \"ap-south-1:946075dc-1656-44d1-92cd-4c8aa6a2ec08\"\n      }),});\n\nexport default {\n  name: 'FeedbackForm',\n\n  components: {\n    Speech2Text,\n    Cropper\n  },\n\n  data() {\n    return {\n      feedbackTextArea: '',\n      text: '',\n      sentences: null,\n      responseData: [],\n      max_len: '500',\n      screenshot: null,\n      canvasCropped: null,\n      imageURL: '',\n      dismissCountDown: 0,\n      }\n  },\n\n  mounted() {\n    \n    this.responseData.push({SiteName: window.location.href})\n    this.responseData.push({Resolution: String(window.screen.width) + 'x' + String(window.screen.height) })\n    this.responseData.push({ userAgent: navigator.userAgent})\n    this.responseData.push({ 'ACCEPT LANGUAGE': navigator.language})\n    if (document.referrer){\n      this.responseData.push({ 'REFERRER': document.referrer})\n    }\n\n    var i;var pluginsData = \"\";\n    for (i = 0; i < navigator.plugins.length; i++) {\n      pluginsData += navigator.plugins[i].name + \" - \"+ navigator.plugins[i].filename + \". \" ;\n    }\n\n    this.responseData.push({Plugins: pluginsData})\n\n  },\n\n  computed: {\n\n    commentCharacterCount() {\n      return this.feedbackTextArea.length;\n\n    },\n    lengthExceeded(){\n      return this.feedbackTextArea.length==this.max_len;\n    },\n    isHidden(){\n      return this.imageURL != ''\n    }\n    \n\n  },\n\n  methods: {\n\n    // sentTexts(text){\n    //   console.log(text)\n    // },\n\n    removeImage(){\n      this.imageURL = ''\n    },\n\n    cropImage(){\n      // console.log(\"Cropped Image:\",this.canvasCropped)\n      this.imageURL = this.canvasCropped.toDataURL('image/jpeg', 1)\n      // document.getElementById(\"file-upload-image\").setAttribute('src', this.canvasCropped.toDataURL('image/jpeg', 1));\n    },\n\n    change({ canvas }) {\n      this.canvasCropped = canvas\n      // var imgString = canvas.toDataURL(\"image/png\");\n      // document.getElementById('croppedImage').setAttribute('src', imgString);\n\t\t},\n\n    clickSC(){\n      html2canvas(document.body).then(canvas => {\n\n        this.screenshot = canvas.toDataURL('image/jpeg', 1);\n        });\n  \n    },\n\n    deleteItem(index){\n      this.responseData.splice(index,1)\n    },\n\n    deleteComment(){\n      this.feedbackTextArea = ''\n    },\n\n    speechEnd({sentences, text}) {\n      console.log('text', text)\n      console.log('sentences', sentences)\n      this.sentences = sentences\n      this.feedbackTextArea = text\n    },\n\n    async submitFeedbackForm() {\n\n      this.countDownChanged = 3\n      \n      console.log(\"Form submitted\")\n      \n      if (this.imageURL){\n\n        console.log(this.imageURL)\n\n        let s3 = new AWS.S3();\n\n        var filePath = uuidv4();\n      \n        var params = {\n            \"Body\": Buffer.from(this.imageURL.replace(/^data:image\\/\\w+;base64,/, \"\"),'base64'),\n            \"Bucket\": \"feedbacktoolbucket\",\n            \"Key\": filePath,\n            \"ContentEncoding\": 'base64',\n            \"ACL\": \"public-read\", /* This makes the image public, but only works if your S3 bucket allows public access */\n            \"ContentType\": 'image/jpg' /* This is important to handle jpg vs png etc */\n        };\n\n        try {\n          const s3Response = await s3.upload(params).promise();\n          console.log(s3Response);\n          this.responseData.push({ImageLocation: s3Response.Location})\n        } catch (error) {\n          console.log(error);\n        }\n\n      }\n\n      if (this.feedbackTextArea){\n        this.responseData.push({Comment: this.feedbackTextArea})\n      }\n\n      axios.post('http://localhost:3000/api/feedbackresponse', \n          this.responseData\n          )\n          .then((response) => {\n            console.log(response);\n          }, (error) => {\n            console.log(error);\n          });\n\n      console.log(this.responseData)\n\n      this.feedbackTextArea = ''\n      // document.getElementById(\"selectedImageId\").value = null;\n\n    },\n    \n    async onImageSelected(event) {\n      // this.imageURL = URL.createObjectURL(e.target.files[0])\n      // const file = e.target.files[0];\n\n      // console.log(event.target.files[0])\n\n\n      const readUploadedFileAsText = (inputFile) => {\n        const temporaryFileReader = new FileReader();\n        return new Promise((resolve) => {\n          temporaryFileReader.addEventListener(\"load\", function() {\n            resolve(temporaryFileReader.result);\n          }); \n    \n    temporaryFileReader.readAsDataURL( inputFile );\n        });\n      };\n\n      const file = event.target.files[0];\n\n      try {\n        const fileContents = await readUploadedFileAsText(file)  \n        this.imageURL = fileContents\n        console.log(fileContents);\n      } catch (e) {\n        console.warn(e.message)\n      }\n\n      console.log(\"Image\", this.imageURL)\n\n    },\n\n    \n\n\n  }\n\n\n\n}\n\n</script>\n\n<style>\n\n.submitbutton, .reviewbutton {\n  background-color: purple;\n  border: none;\n  color: white;\n  padding: 15px 32px;\n  margin: 10px;\n  text-align: center;\n  text-decoration: none;\n  display: inline-block;\n  border-radius: 3px;\n  font-size: 12px;\n}\n\n.max_len_tag{\n  color: red;\n}\n\n.preview-tab{\n  display: flex;\n  justify-content: center;\n}\n\n\n#file-upload-image { \n  border: 5px solid #555;\n  margin:20px;\n  width: 200px;\n  height: 200px;\n\n}\n\n</style>\n"]}]}