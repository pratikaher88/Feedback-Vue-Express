{"remainingRequest":"/Users/pratikaher/VueProjects/feedbackfrontend/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/pratikaher/VueProjects/feedbackfrontend/src/components/FeedbackForm.vue?vue&type=style&index=0&lang=css&","dependencies":[{"path":"/Users/pratikaher/VueProjects/feedbackfrontend/src/components/FeedbackForm.vue","mtime":1611069983243},{"path":"/Users/pratikaher/VueProjects/feedbackfrontend/node_modules/css-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/pratikaher/VueProjects/feedbackfrontend/node_modules/vue-loader/lib/loaders/stylePostLoader.js","mtime":499162500000},{"path":"/Users/pratikaher/VueProjects/feedbackfrontend/node_modules/postcss-loader/src/index.js","mtime":499162500000},{"path":"/Users/pratikaher/VueProjects/feedbackfrontend/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/pratikaher/VueProjects/feedbackfrontend/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:CgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKLmxpc3QgewogIGxpc3Qtc3R5bGU6IG5vbmU7CiAgbWFyZ2luOiAwOwogIGRpc3BsYXk6IGZsZXg7CiAgZmxleC1kaXJlY3Rpb246IGNvbHVtbjsKICBwYWRkaW5nOiA1cHg7Cn0KCmxpIHsKICBiYWNrZ3JvdW5kLWNvbG9yOiBibGFjazsKICBjb2xvcjogd2hpdGU7CiAgYm9yZGVyLXJhZGl1czogM3B4OwogIHBhZGRpbmc6IDEwcHg7Cn0KCi5zdWJtaXRidXR0b24gewogIGJhY2tncm91bmQtY29sb3I6IHB1cnBsZTsgLyogR3JlZW4gKi8KICBib3JkZXI6IG5vbmU7CiAgY29sb3I6IHdoaXRlOwogIHBhZGRpbmc6IDE1cHggMzJweDsKICBtYXJnaW46IDEwcHg7CiAgdGV4dC1hbGlnbjogY2VudGVyOwogIHRleHQtZGVjb3JhdGlvbjogbm9uZTsKICBkaXNwbGF5OiBpbmxpbmUtYmxvY2s7CiAgZm9udC1zaXplOiAxMnB4Owp9CgoudXBsb2FkIHsKICBiYWNrZ3JvdW5kLWNvbG9yOiBkYXJrZ3JlZW47IC8qIEdyZWVuICovCiAgYm9yZGVyOiBub25lOwogIGNvbG9yOiB3aGl0ZTsKICBwYWRkaW5nOiAxNXB4IDMycHg7CiAgbWFyZ2luOiAxMHB4OwogIHRleHQtYWxpZ246IGNlbnRlcjsKICB0ZXh0LWRlY29yYXRpb246IG5vbmU7CiAgZGlzcGxheTogaW5saW5lLWJsb2NrOwogIGZvbnQtc2l6ZTogMTJweDsKfQoKLm1heF9sZW5fdGFnewogIGNvbG9yOiByZWQ7Cn0KCgo="},{"version":3,"sources":["FeedbackForm.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAoLA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA","file":"FeedbackForm.vue","sourceRoot":"src/components","sourcesContent":["<template>\n\n<section id=\"app\" class=\"section\">\n\n    <h1 class=\"title is-1\">\n        Feedback Tool\n    </h1>\n\n    <div class=\"columns\">\n        <div class=\"column\">\n            <form @submit.prevent=\"submitFeedbackForm()\" >\n                <div class=\"field\" >\n                    <label class=\"label\"> \n                      <strong> Comments: </strong> \n                      <span> \n                        ({{ commentCharacterCount }}/{{ max_len }}) \n                        <span v-if=\"isDisabled\" class=\"max_len_tag\">\n                          - Maximum length reached !\n                        </span>\n                      </span>\n\n                    </label>\n\n                    <div class=\"control\">\n                        <textarea id=\"textAreaBox\" rows=\"6\" cols=\"60\" v-model=\"feedbackTextArea\" :maxlength=\"max_len\"/>\n                        <Speech2Text @speechend=\"speechEnd\" />\n                        <!-- <Speech2Text @sentTexts=\"sentTexts\" @speechend=\"speechEnd\" /> -->\n                              <!-- {{sentences}} -->\n                    </div>\n                    <input type=\"file\" @change=\"onImageSelected\">\n\n                    <button class=\"submitbutton\" @submit.prevent=\"submitFeedbackForm\" >SUBMIT</button>\n                </div>\n            </form>\n        </div>\n    </div>\n\n    <!-- <input type=\"text\" @sentTexts=\"sentTexts($event)\"> -->\n    \n    <br/>\n    <br/>\n    <br/>\n\n    \n\n    <button id=\"show-modal\" @click=\"showModal = true\">Show Modal</button>\n    <modal v-if=\"showModal\" @close=\"showModal = false\"/>\n\n    <br/>\n\n    <div v-for=\"(value, index) in responseData\" :key=\"index\" class=\"list\">\n      \n      <li>{{ value }} <button class=\"delete\" v-on:click=\"deleteItem(index)\">x</button></li>\n\n    </div>\n\n    \n\n</section>\n\n</template>\n\n<script>\n\n\nimport AWS from \"aws-sdk\";\nimport Speech2Text from \"./STT\"\nimport Bowser from \"bowser\";\n\nconst browser = Bowser.getParser(window.navigator.userAgent);\n\nexport default {\n  name: 'FeedbackForm',\n\n  components: {\n    Speech2Text\n  },\n\n  data() {\n    return {\n      feedbackTextArea: '',\n      selectedImage: null,\n      text: '',\n      sentences: null,\n      responseData: [],\n      max_len: '500',\n      showModal: false\n      \n    }\n  },\n\n  computed: {\n\n    commentCharacterCount() {\n      return this.feedbackTextArea.length;\n\n    },\n    isDisabled(){\n      return this.feedbackTextArea.length==this.max_len;\n    }\n\n  },\n\n  mounted() {\n      this.responseData.push({\"Comment\": this.feedbackTextArea})\n      this.responseData.push({\"SiteName\": window.location.href})\n      this.responseData.push({\"BrowserName\": browser.getBrowser()})\n    },\n\n  methods: {\n\n    // sentTexts(text){\n    //   console.log(text)\n    // },\n\n    deleteItem(index){\n      this.responseData.splice(index, 1);\n    },\n\n    speechEnd({sentences, text}) {\n      console.log('text', text)\n      console.log('sentences', sentences)\n      this.sentences = sentences\n      this.feedbackTextArea = text\n    },\n\n    submitFeedbackForm() {\n      \n      console.log(this.feedbackTextArea)\n\n      this.feedbackTextArea = ''\n      console.log(\"Form submitted\")\n\n      AWS.config.update({\n      region: \"ap-south-1\",\n      credentials: new AWS.CognitoIdentityCredentials({\n        IdentityPoolId: \"ap-south-1:946075dc-1656-44d1-92cd-4c8aa6a2ec08\"\n      }),});\n\n      let s3 = new AWS.S3();\n      \n      if (this.selectedImage){\n\n        var filePath = this.selectedImage.name;\n      \n        var params = {\n            \"Body\": this.selectedImage,\n            \"Bucket\": \"feedbacktoolbucket\",\n            \"Key\": filePath,\n            \"ACL\": \"public-read\", /* This makes the image public, but only works if your S3 bucket allows public access */\n            \"ContentType\": this.selectedImage.type /* This is important to handle jpg vs png etc */\n        };\n\n        s3.upload(params, (err, data) => {\n            if (err) {\n              console.log(\"Error\", err);\n            } if (data) {\n              console.log(\"Upload Success\", data.Location);\n              this.responseData.push({\"ImageLocation\": data.Location})\n            }\n          });\n      }\n\n      },\n      onImageSelected(e) {\n        this.selectedImage = e.target.files[0]\n        console.log(this.selectedImage)\n      }\n\n\n  }\n\n\n\n}\n\n</script>\n\n<style>\n\n.list {\n  list-style: none;\n  margin: 0;\n  display: flex;\n  flex-direction: column;\n  padding: 5px;\n}\n\nli {\n  background-color: black;\n  color: white;\n  border-radius: 3px;\n  padding: 10px;\n}\n\n.submitbutton {\n  background-color: purple; /* Green */\n  border: none;\n  color: white;\n  padding: 15px 32px;\n  margin: 10px;\n  text-align: center;\n  text-decoration: none;\n  display: inline-block;\n  font-size: 12px;\n}\n\n.upload {\n  background-color: darkgreen; /* Green */\n  border: none;\n  color: white;\n  padding: 15px 32px;\n  margin: 10px;\n  text-align: center;\n  text-decoration: none;\n  display: inline-block;\n  font-size: 12px;\n}\n\n.max_len_tag{\n  color: red;\n}\n\n\n</style>\n"]}]}